<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/ShahAdminAuthApi.Infrastraction/AuthService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahAdminAuthApi.Infrastraction/AuthService.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahAuthApi.Application/Services/Seller/Classes/AccountService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahAuthApi.Application/Services/Seller/Classes/AccountService.cs" />
              <option name="originalContent" value="using System.Security.Claims;&#10;using System.Text;&#10;using AutoMapper;&#10;using Microsoft.AspNetCore.Hosting;&#10;using Microsoft.AspNetCore.Http;&#10;using Microsoft.EntityFrameworkCore;&#10;using ShahAuthApi.Application.Services.Seller.Interfaces;&#10;using ShahAuthApi.Application.Services.Utils;&#10;using ShahAuthApi.Core.DTOs.BuyerDtos.Response;&#10;using ShahAuthApi.Core.DTOs.SellerDtos.Request;&#10;using ShahAuthApi.Core.Enums;&#10;using ShahAuthApi.Core.Models;&#10;using ShahAuthApi.Infrastructure.Contexts;&#10;using static BCrypt.Net.BCrypt;&#10;&#10;namespace ShahAuthApi.Application.Services.Seller.Classes;&#10;&#10;&#10;public class AccountService : IAccountService&#10;{&#10;    private readonly ShahDbContext _context;&#10;    private readonly IMapper _mapper;&#10;    private readonly IWebHostEnvironment _env;&#10;    private readonly EmailSender _emailSender;&#10;    public AccountService(ShahDbContext context, IMapper mapper, IWebHostEnvironment env, EmailSender emailSender)&#10;    {&#10;        _context = context;&#10;        _mapper = mapper;&#10;        _env = env;&#10;        _emailSender = emailSender;&#10;    }&#10;    public async Task&lt;Result&gt; RegisterSellerAsync(SellerRegisterRequestDTO request)&#10;    {&#10;        // Check for existing user&#10;        var existingUser = await _context.Users.FirstOrDefaultAsync(u =&gt; u.Email.ToLower() == request.Email.ToLower());&#10;        if (existingUser != null)&#10;            return Result.Error(&quot;Email is already registered.&quot;, 409);&#10;        &#10;        var existingStoreEmail = await _context.StoreInfos.FirstOrDefaultAsync(u =&gt; u.StoreEmail.ToLower() == request.Email.ToLower());&#10;        if (existingStoreEmail != null)&#10;            return Result.Error(&quot;Store Email is already registered.&quot;, 409);&#10;&#10;        // Validate CategoryId if provided&#10;        string? categoryId = string.IsNullOrWhiteSpace(request.CategoryId) ? null : request.CategoryId;&#10;        if (categoryId != null)&#10;        {&#10;            var categoryExists = await _context.Categories.AnyAsync(c =&gt; c.Id == categoryId);&#10;            if (!categoryExists)&#10;                return Result.Error(&quot;CategoryId does not exist.&quot;, 400);&#10;        }&#10;&#10;        // Map and create User&#10;        var userToAdd = _mapper.Map&lt;User&gt;(request);&#10;        userToAdd.Password = HashPassword(request.Password);&#10;        userToAdd.Role = Role.Seller;&#10;        _context.Users.Add(userToAdd);&#10;        await _context.SaveChangesAsync(); // Save to generate UserId&#10;&#10;        // Map and create SellerTaxInfo&#10;        var storeTaxInfo = _mapper.Map&lt;SellerTaxInfo&gt;(request);&#10;        _context.SellerTaxInfos.Add(storeTaxInfo);&#10;        await _context.SaveChangesAsync(); // Save to generate IDs&#10;&#10;        // Map and create SellerProfile (StoreInfoId = null for now)&#10;        var sellerProfile = _mapper.Map&lt;SellerProfile&gt;(request);&#10;        sellerProfile.UserId = userToAdd.Id;&#10;        sellerProfile.SellerTaxInfoId = storeTaxInfo.Id;&#10;        sellerProfile.IsVerified = false;&#10;        sellerProfile.Passport = request.Passport;&#10;        sellerProfile.StoreInfoId = null; // StoreInfo not created yet&#10;        _context.SellerProfiles.Add(sellerProfile);&#10;        await _context.SaveChangesAsync(); // Save to generate SellerProfileId&#10;&#10;        // Map and create Address&#10;        var address = _mapper.Map&lt;Address&gt;(request);&#10;&#10;        // Map and create StoreInfo (set SellerProfileId before saving)&#10;        var storeInfo = _mapper.Map&lt;StoreInfo&gt;(request);&#10;        storeInfo.CategoryId = categoryId;&#10;        storeInfo.AddressId = address.Id; // Link Address to StoreInfo&#10;        storeInfo.SellerProfileId = sellerProfile.Id; // Set SellerProfileId before saving&#10;        address.StoreInfoId = storeInfo.Id;&#10;        _context.Addresses.Add(address);&#10;        _context.StoreInfos.Add(storeInfo);&#10;        await _context.SaveChangesAsync(); // Save to generate StoreInfoId&#10;&#10;        // Update SellerProfile with StoreInfoId&#10;        sellerProfile.StoreInfoId = storeInfo.Id;&#10;        _context.SellerProfiles.Update(sellerProfile);&#10;        await _context.SaveChangesAsync();&#10;&#10;        // Link SellerProfile to User&#10;        userToAdd.SellerProfileId = sellerProfile.Id;&#10;        _context.Users.Update(userToAdd);&#10;        await _context.SaveChangesAsync();&#10;&#10;        // Link SellerProfileId to SellerTaxInfo&#10;        storeTaxInfo.SellerProfileId = sellerProfile.Id;&#10;        _context.SellerTaxInfos.Update(storeTaxInfo);&#10;        await _context.SaveChangesAsync();&#10;&#10;        return Result.Success(&quot;Seller registered successfully&quot;);&#10;    }&#10;&#10;    public async Task ConfirmEmailAsync(ClaimsPrincipal userClaims, string token, HttpContext context)&#10;    {&#10;        var email = userClaims.Claims.FirstOrDefault(c =&gt; c.Type == ClaimTypes.Email).Value;&#10;        &#10;        var user = await _context.Users.FirstOrDefaultAsync(u =&gt; u.Email == email);&#10;        &#10;        var filePath = Path.Combine(_env.WebRootPath, &quot;ConfirmMessage.html&quot;);&#10;&#10;        var messageContent = new StringBuilder(await File.ReadAllTextAsync(filePath));&#10;&#10;        var link = $&quot;{context.Request.Scheme}://{context.Request.Host}/api/Account/VerifyToken/{user.Id}/{token}&quot;;&#10;        &#10;        messageContent.Replace(&quot;{User}&quot;, user.Name);&#10;        messageContent.Replace(&quot;{ConfirmationLink}&quot;, link);&#10;        &#10;        await _emailSender.SendEmailAsync(user.Email, &quot;Confirm your email&quot;, messageContent.ToString());&#10;    }&#10;&#10;    public async Task&lt;Result&gt; VerifyEmailAsync(string id)&#10;    {&#10;        var user = await _context.Users.FindAsync(id);&#10;        user.EmailConfirmed = true;&#10;        await _context.SaveChangesAsync();&#10;        &#10;        return Result.Success(&quot;Email confirmed&quot;);&#10;    }&#10;&#10;    public async Task&lt;Result&gt; ForgotPasswordAsync(ForgotPasswordRequestDTO request)&#10;    {&#10;        var user = await _context.Users.FindAsync(request.userId);&#10;        if (user == null)&#10;        {&#10;            return Result.Error(&quot;User not found&quot;, 404);&#10;        }&#10;    &#10;        if (!Verify(request.OldPassword, user.Password))&#10;        {&#10;            return Result.Error(&quot;Old password is incorrect&quot;, 400);&#10;        }&#10;&#10;        if (request.NewPassword != request.ConfirmNewPassword)&#10;        {&#10;            return Result.Error(&quot;Passwords do not match&quot;, 400);&#10;        }&#10;    &#10;        user.Password = HashPassword(request.NewPassword);&#10;        await _context.SaveChangesAsync();&#10;    &#10;        return Result.Success(&quot;Password updated successfully&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Security.Claims;&#10;using System.Text;&#10;using AutoMapper;&#10;using Microsoft.AspNetCore.Hosting;&#10;using Microsoft.AspNetCore.Http;&#10;using Microsoft.EntityFrameworkCore;&#10;using ShahAuthApi.Application.Services.Seller.Interfaces;&#10;using ShahAuthApi.Application.Services.Utils;&#10;using ShahAuthApi.Core.DTOs.BuyerDtos.Response;&#10;using ShahAuthApi.Core.DTOs.SellerDtos.Request;&#10;using ShahAuthApi.Core.Enums;&#10;using ShahAuthApi.Core.Models;&#10;using ShahAuthApi.Infrastructure.Contexts;&#10;using static BCrypt.Net.BCrypt;&#10;&#10;namespace ShahAuthApi.Application.Services.Seller.Classes;&#10;&#10;&#10;public class AccountService : IAccountService&#10;{&#10;    private readonly ShahDbContext _context;&#10;    private readonly IMapper _mapper;&#10;    private readonly IWebHostEnvironment _env;&#10;    private readonly EmailSender _emailSender;&#10;    public AccountService(ShahDbContext context, IMapper mapper, IWebHostEnvironment env, EmailSender emailSender)&#10;    {&#10;        _context = context;&#10;        _mapper = mapper;&#10;        _env = env;&#10;        _emailSender = emailSender;&#10;    }&#10;    public async Task&lt;Result&gt; RegisterSellerAsync(SellerRegisterRequestDTO request)&#10;    {&#10;        // Check for existing user&#10;        var existingUser = await _context.Users.FirstOrDefaultAsync(u =&gt; u.Email.ToLower() == request.Email.ToLower());&#10;        if (existingUser != null)&#10;            return Result.Error(&quot;Email is already registered.&quot;, 409);&#10;        &#10;        var existingStoreEmail = await _context.StoreInfos.FirstOrDefaultAsync(u =&gt; u.StoreEmail.ToLower() == request.Email.ToLower());&#10;        if (existingStoreEmail != null)&#10;            return Result.Error(&quot;Store Email is already registered.&quot;, 409);&#10;&#10;        // Validate CategoryId if provided&#10;        string? categoryId = string.IsNullOrWhiteSpace(request.CategoryId) ? null : request.CategoryId;&#10;        if (categoryId != null)&#10;        {&#10;            var categoryExists = await _context.Categories.AnyAsync(c =&gt; c.Id == categoryId);&#10;            if (!categoryExists)&#10;                return Result.Error(&quot;CategoryId does not exist.&quot;, 400);&#10;        }&#10;&#10;        // Map and create User&#10;        var userToAdd = _mapper.Map&lt;User&gt;(request);&#10;        userToAdd.Password = HashPassword(request.Password);&#10;        userToAdd.Role = Role.Seller;&#10;        _context.Users.Add(userToAdd);&#10;        await _context.SaveChangesAsync(); // Save to generate UserId&#10;&#10;        // Map and create SellerTaxInfo&#10;        var storeTaxInfo = _mapper.Map&lt;SellerTaxInfo&gt;(request);&#10;        _context.SellerTaxInfos.Add(storeTaxInfo);&#10;        await _context.SaveChangesAsync(); // Save to generate IDs&#10;&#10;        // Map and create SellerProfile (StoreInfoId = null for now)&#10;        var sellerProfile = _mapper.Map&lt;SellerProfile&gt;(request);&#10;        sellerProfile.Id = userToAdd.Id; // Ensure PK and FK match&#10;        sellerProfile.UserId = userToAdd.Id;&#10;        sellerProfile.SellerTaxInfoId = storeTaxInfo.Id;&#10;        sellerProfile.IsVerified = false;&#10;        sellerProfile.Passport = request.Passport;&#10;        sellerProfile.StoreInfoId = null; // StoreInfo not created yet&#10;        _context.SellerProfiles.Add(sellerProfile);&#10;        await _context.SaveChangesAsync(); // Save to generate SellerProfileId&#10;&#10;        // Map and create Address&#10;        var address = _mapper.Map&lt;Address&gt;(request);&#10;&#10;        // Map and create StoreInfo (set SellerProfileId before saving)&#10;        var storeInfo = _mapper.Map&lt;StoreInfo&gt;(request);&#10;        storeInfo.CategoryId = categoryId;&#10;        storeInfo.AddressId = address.Id; // Link Address to StoreInfo&#10;        storeInfo.SellerProfileId = sellerProfile.Id; // Set SellerProfileId before saving&#10;        address.StoreInfoId = storeInfo.Id;&#10;        _context.Addresses.Add(address);&#10;        _context.StoreInfos.Add(storeInfo);&#10;        await _context.SaveChangesAsync(); // Save to generate StoreInfoId&#10;&#10;        // Update SellerProfile with StoreInfoId&#10;        sellerProfile.StoreInfoId = storeInfo.Id;&#10;        _context.SellerProfiles.Update(sellerProfile);&#10;        await _context.SaveChangesAsync();&#10;&#10;        // Link SellerProfile to User&#10;        userToAdd.SellerProfileId = sellerProfile.Id;&#10;        _context.Users.Update(userToAdd);&#10;        await _context.SaveChangesAsync();&#10;&#10;        // Link SellerProfileId to SellerTaxInfo&#10;        storeTaxInfo.SellerProfileId = sellerProfile.Id;&#10;        _context.SellerTaxInfos.Update(storeTaxInfo);&#10;        await _context.SaveChangesAsync();&#10;&#10;        return Result.Success(&quot;Seller registered successfully&quot;);&#10;    }&#10;&#10;    public async Task ConfirmEmailAsync(ClaimsPrincipal userClaims, string token, HttpContext context)&#10;    {&#10;        var email = userClaims.Claims.FirstOrDefault(c =&gt; c.Type == ClaimTypes.Email).Value;&#10;        &#10;        var user = await _context.Users.FirstOrDefaultAsync(u =&gt; u.Email == email);&#10;        &#10;        var filePath = Path.Combine(_env.WebRootPath, &quot;ConfirmMessage.html&quot;);&#10;&#10;        var messageContent = new StringBuilder(await File.ReadAllTextAsync(filePath));&#10;&#10;        var link = $&quot;{context.Request.Scheme}://{context.Request.Host}/api/Account/VerifyToken/{user.Id}/{token}&quot;;&#10;        &#10;        messageContent.Replace(&quot;{User}&quot;, user.Name);&#10;        messageContent.Replace(&quot;{ConfirmationLink}&quot;, link);&#10;        &#10;        await _emailSender.SendEmailAsync(user.Email, &quot;Confirm your email&quot;, messageContent.ToString());&#10;    }&#10;&#10;    public async Task&lt;Result&gt; VerifyEmailAsync(string id)&#10;    {&#10;        var user = await _context.Users.FindAsync(id);&#10;        user.EmailConfirmed = true;&#10;        await _context.SaveChangesAsync();&#10;        &#10;        return Result.Success(&quot;Email confirmed&quot;);&#10;    }&#10;&#10;    public async Task&lt;Result&gt; ForgotPasswordAsync(ForgotPasswordRequestDTO request)&#10;    {&#10;        var user = await _context.Users.FindAsync(request.userId);&#10;        if (user == null)&#10;        {&#10;            return Result.Error(&quot;User not found&quot;, 404);&#10;        }&#10;    &#10;        if (!Verify(request.OldPassword, user.Password))&#10;        {&#10;            return Result.Error(&quot;Old password is incorrect&quot;, 400);&#10;        }&#10;&#10;        if (request.NewPassword != request.ConfirmNewPassword)&#10;        {&#10;            return Result.Error(&quot;Passwords do not match&quot;, 400);&#10;        }&#10;    &#10;        user.Password = HashPassword(request.NewPassword);&#10;        await _context.SaveChangesAsync();&#10;    &#10;        return Result.Success(&quot;Password updated successfully&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahBuyerAuthApi.Contracts/DTOs/Request/AddressRequestDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahBuyerAuthApi.Contracts/DTOs/Request/AddressRequestDto.cs" />
              <option name="originalContent" value="namespace ShahBuyerAuthApi.Contracts.DTOs.Request;&#10;&#10;public class AddressRequestDto&#10;{&#10;    public string Street { get; set; }&#10;    public string City { get; set; }&#10;    public string State { get; set; }&#10;    public string PostalCode { get; set; }&#10;    public Country Country { get; set; } // Changed from int to Country enum&#10;}" />
              <option name="updatedContent" value="using ShahBuyerAuthApi.Data.Enums;&#10;&#10;namespace ShahBuyerAuthApi.Contracts.DTOs.Request;&#10;&#10;public class AddressRequestDto&#10;{&#10;    public string Street { get; set; }&#10;    public string City { get; set; }&#10;    public string State { get; set; }&#10;    public string PostalCode { get; set; }&#10;    public Country Country { get; set; } // Changed from int to Country enum&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahBuyerAuthApi.Contracts/DTOs/Request/BuyerProfileUpdateDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahBuyerAuthApi.Contracts/DTOs/Request/BuyerProfileUpdateDto.cs" />
              <option name="originalContent" value="using ShahBuyerAuthApi.Contracts.DTOs.Request;&#10;using ShahBuyerAuthApi.Data.Enums;&#10;&#10;namespace ShahBuyerAuthApi.Contracts.DTOs.Request&#10;{&#10;    public class BuyerProfileUpdateDto&#10;    {&#10;        public string UserId { get; set; }&#10;        public string Name { get; set; }&#10;        public string Surname { get; set; }&#10;        public string Phone { get; set; }&#10;        public Country Country { get; set; }&#10;        public AddressRequestDto Address { get; set; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using ShahBuyerAuthApi.Contracts.DTOs.Request;&#10;using ShahBuyerAuthApi.Data.Enums;&#10;&#10;namespace ShahBuyerAuthApi.Contracts.DTOs.Request&#10;{&#10;    public class BuyerProfileUpdateDto&#10;    {&#10;        public string? UserId { get; set; }&#10;        public string? Name { get; set; }&#10;        public string? Surname { get; set; }&#10;        public string? Phone { get; set; }&#10;        public Country? Country { get; set; }&#10;        public AddressRequestDto? Address { get; set; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahBuyerAuthApi.Contracts/DTOs/Request/ResetPasswordRequestDTO.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahBuyerAuthApi.Contracts/DTOs/Request/ResetPasswordRequestDTO.cs" />
              <option name="updatedContent" value="namespace ShahBuyerAuthApi.Contracts.DTOs.Request;&#10;    public string NewPassword { get; set; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahBuyerAuthApi.Contracts/DTOs/Request/UpdateAddressRequestDTO.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahBuyerAuthApi.Contracts/DTOs/Request/UpdateAddressRequestDTO.cs" />
              <option name="updatedContent" value="namespace ShahBuyerAuthApi.Contracts.DTOs.Request;&#10;&#10;public class UpdateAddressRequestDTO&#10;{&#10;    public string? Street { get; set; }&#10;    public string? City { get; set; }&#10;    public string? State { get; set; }&#10;    public string? PostalCode { get; set; }&#10;    public int? CountryCode { get; set; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahBuyerAuthApi.Contracts/DTOs/Response/AddressResponseDTO.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahBuyerAuthApi.Contracts/DTOs/Response/AddressResponseDTO.cs" />
              <option name="updatedContent" value="namespace ShahBuyerAuthApi.Contracts.DTOs.Response;&#10;&#10;public class AddressResponseDTO&#10;{&#10;    public string Id { get; set; }&#10;    public string Street { get; set; }&#10;    public string City { get; set; }&#10;    public string State { get; set; }&#10;    public string PostalCode { get; set; }&#10;    public int Country { get; set; }&#10;    public string BuyerProfileId { get; set; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahBuyerAuthApi.Contracts/DTOs/Response/BuyerProfileResponseDTO.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahBuyerAuthApi.Contracts/DTOs/Response/BuyerProfileResponseDTO.cs" />
              <option name="updatedContent" value="namespace ShahBuyerAuthApi.Contracts.DTOs.Response;&#10;&#10;public class BuyerProfileResponseDTO&#10;{&#10;    public string UserId { get; set; }&#10;    public string Name { get; set; }&#10;    public string Surname { get; set; }&#10;    public string Phone { get; set; }&#10;    public AddressResponseDTO Address { get; set; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahBuyerAuthApi.Data/Enums/CountryCode.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahBuyerAuthApi.Data/Enums/CountryCode.cs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="namespace ShahBuyerAuthApi.Data.Enums&#10;{&#10;    public enum CountryCode&#10;    {&#10;        Unknown = 0,&#10;        AZ = 1,&#10;        TR = 2,&#10;        US = 3,&#10;        UK = 4,&#10;        DE = 5,&#10;        FR = 6,&#10;        RU = 7,&#10;        CN = 8,&#10;        IN = 9,&#10;        Other = 99&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahBuyerAuthApi.Data/NewDirectory1/Role.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahBuyerAuthApi.Data/NewDirectory1/Role.cs" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;&#10;namespace ShahBuyerAuthApi.Data.Models&#10;{&#10;    public class Role&#10;    {&#10;        public string Id { get; set; } = Guid.NewGuid().ToString();&#10;        public string RoleName { get; set; }&#10;        public ICollection&lt;UserRole&gt; UserRoles { get; set; } = new List&lt;UserRole&gt;();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahBuyerAuthApi.Data/NewDirectory1/UserRole.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahBuyerAuthApi.Data/NewDirectory1/UserRole.cs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="namespace ShahBuyerAuthApi.Data.Models&#10;{&#10;    public class UserRole&#10;    {&#10;        public string UserId { get; set; }&#10;        public User User { get; set; }&#10;        public string RoleId { get; set; }&#10;        public Role Role { get; set; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahBuyerFeaturesApi.Application/Services/Interfaces/ICartItemService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahBuyerFeaturesApi.Application/Services/Interfaces/ICartItemService.cs" />
              <option name="originalContent" value="using System.Threading.Tasks;&#10;using ShahBuyerFeaturesApi.Contracts.DTOs.Request;&#10;using ShahBuyerFeaturesApi.Contracts.DTOs.Response;&#10;using ShahBuyerFeaturesApi.Data.Models;&#10;&#10;namespace ShahBuyerFeaturesApi.Application.Services.Interfaces&#10;{&#10;    public interface ICartItemService&#10;    {&#10;        Task AddToCart(string productId);&#10;        Task DeleteFromCart(string productId);&#10;        Task&lt;TypedResult&lt;object&gt;&gt; GetAllCartItems();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Threading.Tasks;&#10;using ShahBuyerFeaturesApi.Contracts.DTOs.Request;&#10;using ShahBuyerFeaturesApi.Contracts.DTOs.Response;&#10;using ShahBuyerFeaturesApi.Data.Models;&#10;&#10;namespace ShahBuyerFeaturesApi.Application.Services.Interfaces&#10;{&#10;    public interface ICartItemService&#10;    {&#10;        Task AddToCart(string productId);&#10;        Task DeleteFromCart(string productId);&#10;        Task&lt;TypedResult&lt;object&gt;&gt; GetAllCartItems();&#10;        Task IncreaseQuantity(string productId);&#10;        Task DecreaseQuantity(string productId);&#10;        Task DeleteAllCartItems();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahBuyerFeaturesApi.Infrastructure/Contexts/DbContextSampleDataSeeder.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahBuyerFeaturesApi.Infrastructure/Contexts/DbContextSampleDataSeeder.cs" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Linq;&#10;using ShahBuyerFeaturesApi.Data.Models;&#10;&#10;namespace ShahBuyerFeaturesApi.Infrastructure.Contexts&#10;{&#10;    public static class DbContextSampleDataSeeder&#10;    {&#10;        public static void SeedSampleData(this ShahDbContext context)&#10;        {&#10;            if (context.BuyerProfiles.Any() || context.Products.Any())&#10;                return; // Already seeded&#10;&#10;            // Categories&#10;            var rootCategory = new Category { CategoryName = &quot;Clothing&quot; };&#10;            var subCategory = new Category { CategoryName = &quot;T-Shirts&quot;, ParentCategory = rootCategory };&#10;            context.Categories.AddRange(rootCategory, subCategory);&#10;&#10;            // Attributes&#10;            var sizeAttr = new ProductAttribute { Name = &quot;Size&quot; };&#10;            var colorAttr = new ProductAttribute { Name = &quot;Color&quot; };&#10;            context.ProductAttributes.AddRange(sizeAttr, colorAttr);&#10;&#10;            // Attribute Values&#10;            var small = new ProductAttributeValue { Value = &quot;Small&quot;, ProductAttribute = sizeAttr };&#10;            var medium = new ProductAttributeValue { Value = &quot;Medium&quot;, ProductAttribute = sizeAttr };&#10;            var white = new ProductAttributeValue { Value = &quot;White&quot;, ProductAttribute = colorAttr };&#10;            var green = new ProductAttributeValue { Value = &quot;Green&quot;, ProductAttribute = colorAttr };&#10;            context.ProductAttributeValues.AddRange(small, medium, white, green);&#10;&#10;            // Store&#10;            var store = new StoreInfo { StoreName = &quot;Best Store&quot; };&#10;            context.StoreInfos.Add(store);&#10;&#10;            // Product Details&#10;            var prodDetails = new ProductDetails { Title = &quot;Cool T-Shirt&quot;, Description = &quot;A very cool t-shirt.&quot; };&#10;            context.ProductDetails.Add(prodDetails);&#10;&#10;            // Product&#10;            var product = new Product&#10;            {&#10;                ProductDetails = prodDetails,&#10;                Category = subCategory,&#10;                StoreInfo = store&#10;            };&#10;            context.Products.Add(product);&#10;&#10;            // Product Variants&#10;            var variant1 = new ProductVariant { Product = product, Price = 19.99m, Stock = 10 };&#10;            var variant2 = new ProductVariant { Product = product, Price = 21.99m, Stock = 5 };&#10;            context.ProductVariants.AddRange(variant1, variant2);&#10;&#10;            // Variant Attribute Values&#10;            context.ProductVariantAttributeValues.AddRange(&#10;                new ProductVariantAttributeValue { ProductVariant = variant1, ProductAttributeValue = small },&#10;                new ProductVariantAttributeValue { ProductVariant = variant1, ProductAttributeValue = white },&#10;                new ProductVariantAttributeValue { ProductVariant = variant2, ProductAttributeValue = medium },&#10;                new ProductVariantAttributeValue { ProductVariant = variant2, ProductAttributeValue = green }&#10;            );&#10;&#10;            // Buyer&#10;            var buyer = new BuyerProfile { Name = &quot;John Doe&quot; };&#10;            context.BuyerProfiles.Add(buyer);&#10;&#10;            // Cart Item&#10;            context.CartItems.Add(new CartItem { BuyerProfile = buyer, Product = product, ProductVariant = variant1, Quantity = 2 });&#10;&#10;            // Favorite&#10;            context.Favorites.Add(new Favorite { BuyerProfile = buyer, Product = product });&#10;&#10;            // Review&#10;            context.Reviews.Add(new Review { Product = product, BuyerProfile = buyer, Rating = 5, Comment = &quot;Great!&quot; });&#10;&#10;            // Order Payment&#10;            context.OrderPayments.Add(new OrderPayment { BuyerProfile = buyer, TotalAmount = 39.98m, Currency = &quot;USD&quot;, Method = &quot;Card&quot;, Status = &quot;Paid&quot; });&#10;&#10;            context.SaveChanges();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahSellerAuthApi.Presentation/Controllers/SampleController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahSellerAuthApi.Presentation/Controllers/SampleController.cs" />
              <option name="updatedContent" value="using Microsoft.AspNetCore.Mvc;&#10;&#10;namespace ShahSellerAuthApi.Presentation.Controllers&#10;{&#10;    [ApiController]&#10;    [Route(&quot;api/[controller]&quot;)]&#10;    public class SampleController : ControllerBase&#10;    {&#10;        [HttpGet]&#10;        public IActionResult Get() =&gt; Ok(&quot;ShahSellerAuthApi is running!&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahSellerFeaturesApi.Application/Services/Interfaces/IStoreInfoService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahSellerFeaturesApi.Application/Services/Interfaces/IStoreInfoService.cs" />
              <option name="updatedContent" value="// ...existing code...&#10;        Task&lt;StoreInfoResponseDTO&gt; UpdateAsync(string id, StoreEditDTO dto);&#10;// ...existing code...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahSellerFeaturesApi.Application/Services/Interfaces/IStoreTaxInfoService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahSellerFeaturesApi.Application/Services/Interfaces/IStoreTaxInfoService.cs" />
              <option name="updatedContent" value="// ...existing code...&#10;        Task&lt;StoreTaxInfoResponseDTO&gt; UpdateAsync(string id, StoreTaxEditDTO dto);&#10;// ...existing code...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahSellerFeaturesApi.Core/DTOs/StoreInfo/StoreEditDTO.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahSellerFeaturesApi.Core/DTOs/StoreInfo/StoreEditDTO.cs" />
              <option name="updatedContent" value="namespace ShahSellerFeaturesApi.Core.DTOs.StoreInfo&#10;{&#10;    public class StoreEditDTO&#10;    {&#10;        public string StoreName { get; set; } = null!;&#10;        public string StoreDescription { get; set; } = null!;&#10;        public string? StoreLogoUrl { get; set; }&#10;        public string StoreEmail { get; set; } = null!;&#10;        public string StorePhone { get; set; } = null!;&#10;        public string? AddressId { get; set; }&#10;        public string? CategoryId { get; set; }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ShahSellerFeaturesApi.Core/DTOs/StoreTaxInfo/StoreTaxEditDTO.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ShahSellerFeaturesApi.Core/DTOs/StoreTaxInfo/StoreTaxEditDTO.cs" />
              <option name="updatedContent" value="namespace ShahSellerFeaturesApi.Core.DTOs.StoreTaxInfo&#10;{&#10;    public class StoreTaxEditDTO&#10;    {&#10;        public string TaxNumber { get; set; } = null!;&#10;        public string TaxType { get; set; } = null!;&#10;        public string? Description { get; set; }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>