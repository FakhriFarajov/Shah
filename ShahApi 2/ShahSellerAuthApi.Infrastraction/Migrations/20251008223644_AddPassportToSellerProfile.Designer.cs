// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShahSellerAuthApi.Infrastructure.Contexts;

#nullable disable

namespace ShahSellerAuthApi.Infrastraction.Migrations
{
    [DbContext(typeof(ShahDbContext))]
    [Migration("20251008223644_AddPassportToSellerProfile")]
    partial class AddPassportToSellerProfile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BuyerProfileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StoreInfoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.BuyerProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("AddressId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderPaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.ToTable("BuyerProfiles");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.CartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BuyerProfileId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ProductVariantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyerProfileId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Favorite", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BuyerProfileId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerProfileId");

                    b.HasIndex("ProductId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BuyerProfileId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderPaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarehouseOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerProfileId");

                    b.HasIndex("ReceiptId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ProductVariantId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.OrderPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BuyerProfileId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GatewayTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<decimal?>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RefundReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerProfileId")
                        .IsUnique();

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderPayments");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ProductDetailsId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("StoreInfoId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductDetailsId")
                        .IsUnique();

                    b.HasIndex("StoreInfoId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductAttribute", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductAttributeValue", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ProductAttributeId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("HeightInGrams")
                        .HasColumnType("int");

                    b.Property<int>("LengthInGrams")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("WeightInGrams")
                        .HasColumnType("int");

                    b.Property<int>("WidthInGrams")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductVariant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductVariantAttributeValue", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ProductAttributeValueId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ProductVariantId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeValueId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductVariantAttributeValues");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductVariantImage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductVariantId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductVariantImages");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Receipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BuyerProfileId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.PrimitiveCollection<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyerProfileId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.SellerProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("CountryCitizen")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("SellerTaxInfoId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("StoreInfoId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("UserId");

                    b.ToTable("SellerProfiles");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.SellerTaxInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("SellerProfileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxIdType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SellerTaxInfos");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.StoreInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("AddressId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("SellerProfileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("CategoryId");

                    b.ToTable("StoreInfos");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BuyerProfileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SellerProfileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Warehouse", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("AddressId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.WarehouseOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("ShippedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseOrders");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.BuyerProfile", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.Address", "Address")
                        .WithOne("BuyerProfile")
                        .HasForeignKey("ShahSellerAuthApi.Data.Models.BuyerProfile", "AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ShahSellerAuthApi.Data.Models.User", "User")
                        .WithOne("BuyerProfile")
                        .HasForeignKey("ShahSellerAuthApi.Data.Models.BuyerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.CartItem", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.BuyerProfile", "BuyerProfile")
                        .WithMany("CartItems")
                        .HasForeignKey("BuyerProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ShahSellerAuthApi.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShahSellerAuthApi.Data.Models.ProductVariant", "ProductVariant")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuyerProfile");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Category", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Favorite", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.BuyerProfile", "BuyerProfile")
                        .WithMany("Favorites")
                        .HasForeignKey("BuyerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShahSellerAuthApi.Data.Models.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyerProfile");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Order", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.BuyerProfile", "BuyerProfile")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShahSellerAuthApi.Data.Models.Receipt", "Receipt")
                        .WithOne("Order")
                        .HasForeignKey("ShahSellerAuthApi.Data.Models.Order", "ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyerProfile");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.OrderItem", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShahSellerAuthApi.Data.Models.ProductVariant", "ProductVariant")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.OrderPayment", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.BuyerProfile", "BuyerProfile")
                        .WithOne("OrderPayment")
                        .HasForeignKey("ShahSellerAuthApi.Data.Models.OrderPayment", "BuyerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShahSellerAuthApi.Data.Models.Order", "Order")
                        .WithOne("OrderPayment")
                        .HasForeignKey("ShahSellerAuthApi.Data.Models.OrderPayment", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BuyerProfile");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Product", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShahSellerAuthApi.Data.Models.ProductDetails", "ProductDetails")
                        .WithOne("Product")
                        .HasForeignKey("ShahSellerAuthApi.Data.Models.Product", "ProductDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShahSellerAuthApi.Data.Models.StoreInfo", "StoreInfo")
                        .WithMany("Products")
                        .HasForeignKey("StoreInfoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("ProductDetails");

                    b.Navigation("StoreInfo");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductAttribute", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.Category", "Category")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductAttributeValue", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.ProductAttribute", "ProductAttribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductVariant", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductVariantAttributeValue", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.ProductAttributeValue", "ProductAttributeValue")
                        .WithMany("ProductVariantValues")
                        .HasForeignKey("ProductAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShahSellerAuthApi.Data.Models.ProductVariant", "ProductVariant")
                        .WithMany("ProductVariantAttributeValue")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttributeValue");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductVariantImage", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.ProductVariant", "ProductVariant")
                        .WithMany("Images")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Review", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.BuyerProfile", "BuyerProfile")
                        .WithMany("Reviews")
                        .HasForeignKey("BuyerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShahSellerAuthApi.Data.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyerProfile");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.SellerProfile", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.User", "User")
                        .WithOne("SellerProfile")
                        .HasForeignKey("ShahSellerAuthApi.Data.Models.SellerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.SellerTaxInfo", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.SellerProfile", "SellerProfile")
                        .WithOne("SellerTaxInfo")
                        .HasForeignKey("ShahSellerAuthApi.Data.Models.SellerTaxInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellerProfile");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.StoreInfo", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.Address", "Address")
                        .WithOne("StoreInfo")
                        .HasForeignKey("ShahSellerAuthApi.Data.Models.StoreInfo", "AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ShahSellerAuthApi.Data.Models.Category", "Category")
                        .WithMany("StoreInfos")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShahSellerAuthApi.Data.Models.SellerProfile", "SellerProfile")
                        .WithOne("StoreInfo")
                        .HasForeignKey("ShahSellerAuthApi.Data.Models.StoreInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Category");

                    b.Navigation("SellerProfile");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Warehouse", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.Address", "Address")
                        .WithOne("Warehouse")
                        .HasForeignKey("ShahSellerAuthApi.Data.Models.Warehouse", "AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.WarehouseOrder", b =>
                {
                    b.HasOne("ShahSellerAuthApi.Data.Models.Order", "Order")
                        .WithOne("WarehouseOrder")
                        .HasForeignKey("ShahSellerAuthApi.Data.Models.WarehouseOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShahSellerAuthApi.Data.Models.Warehouse", "Warehouse")
                        .WithMany("WarehouseOrder")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Address", b =>
                {
                    b.Navigation("BuyerProfile");

                    b.Navigation("StoreInfo");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.BuyerProfile", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("OrderPayment");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Category", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("Products");

                    b.Navigation("StoreInfos");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("OrderPayment");

                    b.Navigation("WarehouseOrder");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Product", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("ProductVariants");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductAttribute", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductAttributeValue", b =>
                {
                    b.Navigation("ProductVariantValues");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductDetails", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.ProductVariant", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductVariantAttributeValue");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Receipt", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.SellerProfile", b =>
                {
                    b.Navigation("SellerTaxInfo");

                    b.Navigation("StoreInfo");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.StoreInfo", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.User", b =>
                {
                    b.Navigation("BuyerProfile");

                    b.Navigation("SellerProfile");
                });

            modelBuilder.Entity("ShahSellerAuthApi.Data.Models.Warehouse", b =>
                {
                    b.Navigation("WarehouseOrder");
                });
#pragma warning restore 612, 618
        }
    }
}
